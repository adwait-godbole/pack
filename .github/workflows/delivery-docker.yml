name: delivery / docker

on:
  release:
    types:
      - released
  workflow_dispatch:
    inputs:
      tag_name:
        description: The release tag to distribute
        required: true
      tag_latest:
        description: Tag as latest
        required: false
        type: boolean
        default: false

env:
  REGISTRY_NAME: 'docker.io'
  USER_NAME: 'buildpacksio'
  IMG_NAME: 'pack'
  ARCHITECTURES: ["arm64", "amd64", "s390x", "ppc64le"]

jobs:
  deliver-docker:
    strategy:
      matrix:
        config: [tiny, base]
        include:
          - config: tiny
            base_image: gcr.io/distroless/static
            suffix:
          - config: base
            base_image: ubuntu:jammy
            suffix: -base
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Determine version
        uses: actions/github-script@v7
        id: version
        with:
          result-encoding: string
          script: |
            let tag = (context.payload.release && context.payload.release.tag_name)
              || (context.payload.inputs && context.payload.inputs.tag_name);

            if (!tag) {
              throw "ERROR: unable to determine tag";
            }

            return tag.replace(/^v/, '');
      - name: Checkout source at tag
        uses: actions/checkout@v4
        with:
          ref: v${{ steps.version.outputs.result }}
      - name: Setup Docker Build Environment
        run: |
          echo "IMG_NAME=${{ env.REGISTRY_NAME }}/${{ env.USER_NAME }}/${{ env.IMG_NAME }}" >> $GITHUB_ENV
          echo "${{ env.ARCHITECTURES }}" | jq -r '.[]' > architectures.txt
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: buildpacks/github-actions/setup-tools@v5.8.1
      - name: Buildx Build/Publish
        run: |
          docker buildx build . \
            --tag ${{ env.IMG_NAME }}:${{ steps.version.outputs.result }}${{ matrix.suffix }} \
            --platform linux/amd64,linux/arm64,linux/s390x,linux/ppc64le \
            --build-arg pack_version=${{ steps.version.outputs.result }} \
            --build-arg base_image=${{ matrix.base_image }} \
            --provenance=false \
            --push
          echo "IMG_DIGEST=$(crane digest ${{ env.IMG_NAME }}:${{ steps.version.outputs.result }}${{ matrix.suffix }})" >> $GITHUB_ENV
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Download and Attach SBOMs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while IFS= read -r arch; do
            pattern=$([ "$arch" = "amd64" ] && echo "pack-v${{ steps.version.outputs.result }}-linux-sbom.cdx.json" || echo "pack-v${{ steps.version.outputs.result }}-linux-${arch}-sbom.cdx.json")
            gh release download --pattern "${pattern}" ${{ github.event.release.tag_name }} &
          done < architectures.txt
          wait

          sign_and_verify() {
            local tag=$1
            local alias=${2:-}

            while IFS= read -r arch; do
              sbom_json_file=$([ "$arch" = "amd64" ] && echo "pack-v${{ steps.version.outputs.result }}-linux-sbom.cdx.json" || echo "pack-v${{ steps.version.outputs.result }}-linux-${arch}-sbom.cdx.json")

              cosign attach sbom --sbom "$sbom_json_file" \
                --platform "linux/${arch}" \
                "$tag@${IMG_DIGEST}"
            done < architectures.txt

            cosign sign -r -y \
              -a version=${{ steps.version.outputs.result }} \
              -a config=${{ matrix.config }} \
              ${alias:+-a alias=$alias} \
              --attachment sbom \
              "$tag@${IMG_DIGEST}"

            cosign verify \
              --certificate-identity-regexp "https://github.com/${{ github.repository_owner }}/pack/.github/workflows/delivery-docker.yml" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com \
              -a version=${{ steps.version.outputs.result }} \
              -a config=${{ matrix.config }} \
              ${alias:+-a alias=$alias} \
              --attachment sbom \
              "$tag@${IMG_DIGEST}"
          }

          sign_and_verify "${{ env.IMG_NAME }}:${{ steps.version.outputs.result }}${{ matrix.suffix }}"

          # Conditionally tag and sign as base
          if [[ ("${{ github.event.release }}" != "" || "${{ github.event.inputs.tag_latest }}" == "true") && "${{ matrix.config }}" == "base" ]]; then
            crane copy ${{ env.IMG_NAME }}:${{ steps.version.outputs.result }}${{ matrix.suffix }} ${{ env.IMG_NAME }}:base
            sign_and_verify "${{ env.IMG_NAME }}:base" "base"
          fi

          # Conditionally tag and sign as latest
          if [[ ("${{ github.event.release }}" != "" || "${{ github.event.inputs.tag_latest }}" == "true") && "${{ matrix.config }}" != "base" ]]; then
            crane copy ${{ env.IMG_NAME }}:${{ steps.version.outputs.result }}${{ matrix.suffix }} ${{ env.IMG_NAME }}:latest
            sign_and_verify "${{ env.IMG_NAME }}:latest" "latest"
          fi
